import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,a as t}from"./app-C67pSKQW.js";const n={},l=t(`<p>Java 是一门面向对象的高级语言，一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作，下面简要介绍下类、对象、方法和实例变量的概念。</p><p><strong>对象：</strong> 对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</p><p><strong>类：</strong> 类是一个模板，它描述一类对象的行为和状态。例如人是一个类，猫和狗也是一个类。</p><p><strong>方法：</strong> 方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。</p><p><strong>实例变量：</strong> 每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。</p><h2 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法"><span>基本语法</span></a></h2><p>在编写 Java 程序时，应注意：</p><ul><li><strong>大小写敏感：</strong> Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。</li><li><strong>类名：</strong> 对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，即应该采用大驼峰命名法。</li><li><strong>方法名：</strong> 所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。</li><li><strong>源文件名：</strong> 源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 <strong>.java</strong>。（如果文件名和类名不相同则会导致编译错误）。</li><li><strong>主方法入口：</strong> 所有的 Java 程序由 <strong>public static void main(String[] args)</strong> 方法开始执行，该方法是 Java 程序的入口方法，一个 Java 程序只能有一个 main 方法。</li></ul><p><strong>一个简单的 Java 程序</strong></p><p>一个 Java 程序中可能存在类、方法、变量等，比如以下 Java 程序，将会输出字符串<code>Hello World</code>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> HelloWorld</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    /*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     * 它将输出字符串 Hello World</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Hello World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 输出 Hello World</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个 Java 程序的执行过程存在以下几个阶段：</p><ol><li><strong>编码：</strong> 编写 Java 源码，即 Java 程序源文件，Java 源文件并不能直接运行。</li><li><strong>编译：</strong> 将 Java 源代码编译成字节码文件，即 class 文件，但是操作系统并不能识别 class 文件，只有 jvm 能够识别。</li><li><strong>执行：</strong> jvm（Java 虚拟机）解释、执行字节码文件。</li></ol><p>比如可以按照下面的步骤运行上述的简单 Java 程序：</p><ul><li>新建一个名为<strong>HelloWorld.java</strong>的文件，并将上述代码复制到该文件中。</li><li>打开<strong>cmd</strong>窗口，进入到<strong>HelloWorld.java</strong>文件所在的窗口。</li><li>在<strong>cmd</strong>窗口键入<code>javac HelloWorld.java</code>，通过<code>javac</code>命令将 Java 源文件编译为字节码文件。</li><li>如果没有错误的话，继续在<strong>cmd</strong>窗口输入<code>java HelloWorld</code>就可以运行该程序了。</li></ul><h2 id="java-标识符" tabindex="-1"><a class="header-anchor" href="#java-标识符"><span>Java 标识符</span></a></h2><p>Java 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。</p><p>关于 Java 标识符，需要注意：</p><ul><li>所有的标识符只能包括字母（A-Z 或者 a-z）、数字、美元符号（$）和下划线（_），且不能以数字开头</li><li>首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合</li><li>关键字不能用作标识符</li><li>标识符是大小写敏感的</li><li>标识符的命名应该有意义</li></ul><h2 id="java-修饰符" tabindex="-1"><a class="header-anchor" href="#java-修饰符"><span>Java 修饰符</span></a></h2><p>Java 可以使用修饰符来修饰类和类中的方法、属性，Java 中主要有两类修饰符：</p><ul><li>访问控制修饰符：default, public , protected, private</li><li>非访问控制修饰符 : final, abstract, static, synchronized</li></ul><p>具体介绍可在修饰符章节中查看</p><h2 id="java-变量" tabindex="-1"><a class="header-anchor" href="#java-变量"><span>Java 变量</span></a></h2><p>Java 中的变量主要有</p><ul><li>局部变量（在一个方法中声明的变量，只能在该方法中使用）</li><li>类变量（static 修饰的静态变量）</li><li>成员变量（非静态变量）</li></ul><h2 id="java-枚举" tabindex="-1"><a class="header-anchor" href="#java-枚举"><span>Java 枚举</span></a></h2><p>Java 5.0 引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的 bug。枚举可以单独声明或者声明在类里面。方法、变量、构造函数也可以在枚举中定义。</p><h2 id="java-关键字" tabindex="-1"><a class="header-anchor" href="#java-关键字"><span>Java 关键字</span></a></h2><p>以下为 Java 中的保留关键字，这些关键字不能用于常量、变量、和任何标识符的名称。目前 Java 中存在 53 个保留关键字，其中关键字 48 个，3 个特殊直接量和 2 个保留字。</p><p><strong>48 个关键字：</strong> abstract、assert、boolean、break、byte、case、catch、char、class、continue、default、do、double、else、enum、extends、final、finally、float、for、if、implements、import、int、interface、instanceof、long、native、new、package、private、protected、public、return、short、static、strictfp、super、switch、synchronized、this、throw、throws、transient、try、void、volatile、while。</p><p><strong>3 个特殊直接量：</strong> true、false、null。</p><p><strong>2 个保留字：</strong> goto、const。</p><p>关于这 53 个保留关键字的的含义：</p><p><strong>【访问控制】</strong></p><p><strong>private：</strong> 私用模式，访问控制修饰符，可以应用于类、方法或字段（在类中声明的变量）；</p><p><strong>protected：</strong> 保护模式，可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符；</p><p><strong>public：</strong> 共用模式，可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。</p><p><strong>【类、方法和变量修饰符】</strong></p><p><strong>abstract：</strong> 表明类或者成员方法具有抽象属性，用于修改类或方法；</p><p><strong>class：</strong> 声明一个类，用来声明新的 Java 类；</p><p><strong>extends：</strong> 表明一个类型是另一个类型的子类型。对于类，可以是另一个类或者抽象类；对于接口，可以是另一个接口；</p><p><strong>final：</strong> 用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变，用来定义常量；</p><p><strong>implements：</strong> 表明一个类实现了给定的接口；</p><p><strong>interface：</strong> 接口；</p><p><strong>native：</strong> 用来声明一个方法是由与计算机相关的语言（如 C/C++/FORTRAN 语言）实现的；</p><p><strong>new：</strong> 用来创建新实例对象；</p><p><strong>static：</strong> 表明具有静态属性；</p><p><strong>strictfp：</strong> 用来声明 FP_strict（单精度或双精度浮点数）表达式遵循 IEEE 754 算术规范；</p><p><strong>synchronized：</strong> 表明一段代码需要同步执行；</p><p><strong>transient：</strong> 声明不用序列化的成员域；</p><p><strong>volatile：</strong> 表明两个或者多个变量必须同步地发生变化。</p><p><strong>【程序控制】</strong></p><p><strong>break：</strong> 提前跳出一个块；</p><p><strong>continue：</strong> 回到一个块的开始处；</p><p><strong>return：</strong> 从成员方法中返回数据；</p><p><strong>do：</strong> 用在 do-while 循环结构中；</p><p><strong>while：</strong> 用在循环结构中；</p><p><strong>if：</strong> 条件语句的引导词；</p><p><strong>else：</strong> 用在条件语句中，表明当条件不成立时的分支；</p><p><strong>for：</strong> 一种循环结构的引导词；</p><p><strong>instanceof：</strong> 用来测试一个对象是否是指定类型的实例对象；</p><p><strong>switch：</strong> 分支语句结构的引导词；</p><p><strong>case：</strong> 用在 switch 语句之中，表示其中的一个分支；</p><p><strong>default：</strong> 默认，例如：用在 switch 语句中，表明一个默认的分支 Java8 中也作用于声明接口函数的默认实现。</p><p><strong>【错误处理】</strong></p><p><strong>try：</strong> 尝试一个可能抛出异常的程序块；</p><p><strong>catch：</strong> 用在异常处理中，用来捕捉异常；</p><p><strong>throw：</strong> 抛出一个异常；</p><p><strong>throws：</strong> 声明在当前定义的成员方法中所有需要抛出的异常。</p><p><strong>【包相关】</strong></p><p><strong>import：</strong> 表明要访问指定的类或包；</p><p><strong>package：</strong> 包。</p><p><strong>【基本类型】</strong></p><p><strong>boolean：</strong> 基本数据类型之一，声明布尔类型的关键字；</p><p><strong>byte：</strong> 基本数据类型之一，字节类型；</p><p><strong>char：</strong> 基本数据类型之一，字符类型；</p><p><strong>double：</strong> 基本数据类型之一，双精度浮点数类型；</p><p><strong>float：</strong> 基本数据类型之一，单精度浮点数类型；</p><p><strong>int：</strong> 基本数据类型之一，整数类型；</p><p><strong>long：</strong> 基本数据类型之一，长整数类型；</p><p><strong>short：</strong> 基本数据类型之一,短整数类型；</p><p><strong>null：</strong> 空，表示无值，不能将 null 赋给原始类型（byte、short、int、long、char、float、double、boolean）变量；</p><p><strong>true：</strong> 真，boolean 变量的两个合法值中的一个；</p><p><strong>false：</strong> 假，boolean 变量的两个合法值之一。</p><p><strong>【变量引用】</strong></p><p><strong>super：</strong> 表明当前对象的父类型的引用或者父类型的构造方法；</p><p><strong>this：</strong> 指向当前实例对象的引用，用于引用当前实例；</p><p><strong>void：</strong> 声明当前成员方法没有返回值，void 可以用作方法的返回类型，以指示该方法不返回值。</p><p><strong>【保留字】</strong></p><p><strong>goto：</strong> 保留关键字，没有具体含义；</p><p><strong>Const：</strong> 保留关键字，没有具体含义，是一个类型修饰符，使用 const 声明的对象不能更新。</p><h2 id="java-注释" tabindex="-1"><a class="header-anchor" href="#java-注释"><span>Java 注释</span></a></h2><p>在计算机语言中，注释是计算机语言的一个重要组成部分，用于在源代码中解释代码的作用，可以增强程序的可读性，可维护性。</p><p>Java 注释是一种在 Java 程序中用于提供代码功能说明的文本。</p><p>注释不会被编译器包含在最终的可执行程序中，因此不会影响程序的运行。</p><p>注释是良好的编程习惯，它们帮助程序员更容易地理解代码的用途和功能，并且在团队协作中非常有用。</p><p>Java 支持单行、多行以及文本注释。</p><p><strong>单行注释</strong></p><p>单行注释以双斜杠 <code>//</code> 开始：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 这是一个单行注释</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 初始化一个变量x为10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>多行注释</strong></p><p>多行注释以 <code>/*</code>开始，以 <code>*/</code> 结束：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">这是一个多行注释</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">可以用来注释多行代码</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 初始化一个变量y为20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>文档注释</strong></p><p>文档注释以 <code>\\**</code> 开始，以 <code>**/</code> 结束，通常出现在类、方法、字段等的声明前面，用于生成代码文档，这种注释可以被工具提取并生成 API 文档，如 JavaDoc。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * 这是一个文档注释示例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * 它通常包含有关类、方法或字段的详细信息</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 类的成员和方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文档注释的格式通常包含一些特定的标签，如 <strong>@param</strong> 用于描述方法参数，<strong>@return</strong> 用于描述返回值，<strong>@throws</strong> 用于描述可能抛出的异常等等，这些标签有助于生成清晰的 API 文档，以便其他开发者能够更好地理解和使用你的代码。</p><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h2><p>在 Java 中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类。</p><p>利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。被继承的类称为超类（super class），派生类称为子类（sub class）。</p><h2 id="接口" tabindex="-1"><a class="header-anchor" href="#接口"><span>接口</span></a></h2><p>在 Java 中，接口可理解为对象间相互通信的协议。接口在继承中扮演着很重要的角色。</p><p>接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类。</p>`,114),e=[l];function r(p,o){return a(),i("div",null,e)}const d=s(n,[["render",r],["__file","Java基础语法.html.vue"]]),k=JSON.parse('{"path":"/%E4%B8%93%E9%A1%B9/Java%E4%B8%93%E9%A1%B9/Java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html","title":"Java基础语法","lang":"zh-CN","frontmatter":{"title":"Java基础语法","tags":["Java"],"order":"2","description":"Java 是一门面向对象的高级语言，一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作，下面简要介绍下类、对象、方法和实例变量的概念。 对象： 对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。 类： 类是一个模板，它描述一类对象的行为和状态。例如人是一...","head":[["meta",{"property":"og:url","content":"https://gly-dragon.github.io/blog/blog/%E4%B8%93%E9%A1%B9/Java%E4%B8%93%E9%A1%B9/Java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"龙哥不管事"}],["meta",{"property":"og:title","content":"Java基础语法"}],["meta",{"property":"og:description","content":"Java 是一门面向对象的高级语言，一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作，下面简要介绍下类、对象、方法和实例变量的概念。 对象： 对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。 类： 类是一个模板，它描述一类对象的行为和状态。例如人是一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-17T08:53:27.000Z"}],["meta",{"property":"article:author","content":"龙哥不管事"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:modified_time","content":"2024-06-17T08:53:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java基础语法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-17T08:53:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"龙哥不管事\\",\\"url\\":\\"https://gly-dragon.github.io/blog/\\"}]}"]]},"headers":[{"level":2,"title":"基本语法","slug":"基本语法","link":"#基本语法","children":[]},{"level":2,"title":"Java 标识符","slug":"java-标识符","link":"#java-标识符","children":[]},{"level":2,"title":"Java 修饰符","slug":"java-修饰符","link":"#java-修饰符","children":[]},{"level":2,"title":"Java 变量","slug":"java-变量","link":"#java-变量","children":[]},{"level":2,"title":"Java 枚举","slug":"java-枚举","link":"#java-枚举","children":[]},{"level":2,"title":"Java 关键字","slug":"java-关键字","link":"#java-关键字","children":[]},{"level":2,"title":"Java 注释","slug":"java-注释","link":"#java-注释","children":[]},{"level":2,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":2,"title":"接口","slug":"接口","link":"#接口","children":[]}],"git":{"createdTime":1718584809000,"updatedTime":1718614407000,"contributors":[{"name":"龙哥不管事","email":"gly3498347531@163.com","commits":3}]},"readingTime":{"minutes":9.47,"words":2842},"filePathRelative":"专项/Java专项/Java基础/Java基础语法.md","localizedDate":"2024年6月17日","excerpt":"<p>Java 是一门面向对象的高级语言，一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作，下面简要介绍下类、对象、方法和实例变量的概念。</p>\\n<p><strong>对象：</strong> 对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</p>\\n<p><strong>类：</strong> 类是一个模板，它描述一类对象的行为和状态。例如人是一个类，猫和狗也是一个类。</p>\\n<p><strong>方法：</strong> 方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。</p>","autoDesc":true}');export{d as comp,k as data};
