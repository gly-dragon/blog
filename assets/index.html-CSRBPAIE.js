import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as n,o as r}from"./app-B5y1gjpL.js";const i={};function a(l,t){return r(),o("div",null,t[0]||(t[0]=[n('<p>设计模式（design pattern）是面向对象设计中反复出现的问题的解决方案，是对大家实际工作中写的各种代码进行高层次抽象的总结，<em>Gang of Four</em> (<em>GoF</em>)将设计模式分为 23 种经典模式，根据类型又可以分为创建型、行为型、结构型三种。</p><ul><li><p><strong>创建型模式（Creational）：</strong> 关注对象的实例化过程，包括了如何实例化对象、隐藏对象的创建细节等。常见的创建型模式有单例模式、工厂模式、抽象工厂模式等。</p></li><li><p><strong>结构型模式（Structural）：</strong> 关注对象之间的组合方式，以达到构建更大结构的目标。这些模式帮助你定义对象之间的关系，从而实现更大的结构。常见的结构型模式有适配器模式、装饰器模式、代理模式等。</p></li><li><p><strong>行为型模式（Behavioral）：</strong> 关注对象之间的通信方式，以及如何合作共同完成任务。这些模式涉及到对象之间的交互、责任分配等。常见的行为型模式有观察者模式、策略模式、命令模式等。</p></li></ul><h2 id="设计模式的六大原则" tabindex="-1"><a class="header-anchor" href="#设计模式的六大原则"><span>设计模式的六大原则</span></a></h2><ol><li><strong>单一职责原则：</strong> 一个类应该只负责一个功能领域中的相应职责。</li><li><strong>开闭原则：</strong> 软件实体（类、模块、函数等）应该可以扩展，但是不可修改（对修改关闭，对扩展开放）。</li><li><strong>里氏替换原则：</strong> 子类必须能够替换掉它们的基类。</li><li><strong>依赖倒置原则：</strong> 高层模块不应该依赖于低层模块，它们都应该依赖于抽象。抽象不应该依赖于实现细节，实现细节应该依赖于抽象。</li><li><strong>接口隔离原则：</strong> 不应该强迫客户端实现一个他们不需要的接口。一个类对另一个类的依赖应该通过最小接口来实现。</li><li><strong>迪米特原则：</strong> 一个软件实体应当尽可能少地与其他实体发生相互作用。</li></ol>',4)]))}const g=e(i,[["render",a],["__file","index.html.vue"]]),c=JSON.parse('{"path":"/%E8%BF%9B%E9%98%B6/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","title":"设计模式","lang":"zh-CN","frontmatter":{"title":"设计模式","index":false,"dir":{"link":true},"description":"设计模式（design pattern）是面向对象设计中反复出现的问题的解决方案，是对大家实际工作中写的各种代码进行高层次抽象的总结，Gang of Four (GoF)将设计模式分为 23 种经典模式，根据类型又可以分为创建型、行为型、结构型三种。 创建型模式（Creational）： 关注对象的实例化过程，包括了如何实例化对象、隐藏对象的创建细节等...","head":[["meta",{"property":"og:url","content":"https://gly-dragon.github.io/blog/blog/%E8%BF%9B%E9%98%B6/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],["meta",{"property":"og:site_name","content":"龙哥不管事"}],["meta",{"property":"og:title","content":"设计模式"}],["meta",{"property":"og:description","content":"设计模式（design pattern）是面向对象设计中反复出现的问题的解决方案，是对大家实际工作中写的各种代码进行高层次抽象的总结，Gang of Four (GoF)将设计模式分为 23 种经典模式，根据类型又可以分为创建型、行为型、结构型三种。 创建型模式（Creational）： 关注对象的实例化过程，包括了如何实例化对象、隐藏对象的创建细节等..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-05T08:20:57.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-05T08:20:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-05T08:20:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"龙哥不管事\\",\\"url\\":\\"https://gly-dragon.github.io/blog/\\"}]}"]]},"headers":[{"level":2,"title":"设计模式的六大原则","slug":"设计模式的六大原则","link":"#设计模式的六大原则","children":[]}],"git":{"createdTime":1720167657000,"updatedTime":1720167657000,"contributors":[{"name":"龙哥不管事","email":"gly3498347531@163.com","commits":1}]},"readingTime":{"minutes":1.78,"words":534},"filePathRelative":"进阶/设计模式/README.md","localizedDate":"2024年7月5日","excerpt":"<p>设计模式（design pattern）是面向对象设计中反复出现的问题的解决方案，是对大家实际工作中写的各种代码进行高层次抽象的总结，<em>Gang of Four</em> (<em>GoF</em>)将设计模式分为 23 种经典模式，根据类型又可以分为创建型、行为型、结构型三种。</p>\\n<ul>\\n<li>\\n<p><strong>创建型模式（Creational）：</strong> 关注对象的实例化过程，包括了如何实例化对象、隐藏对象的创建细节等。常见的创建型模式有单例模式、工厂模式、抽象工厂模式等。</p>\\n</li>\\n<li>\\n<p><strong>结构型模式（Structural）：</strong> 关注对象之间的组合方式，以达到构建更大结构的目标。这些模式帮助你定义对象之间的关系，从而实现更大的结构。常见的结构型模式有适配器模式、装饰器模式、代理模式等。</p>\\n</li>\\n<li>\\n<p><strong>行为型模式（Behavioral）：</strong> 关注对象之间的通信方式，以及如何合作共同完成任务。这些模式涉及到对象之间的交互、责任分配等。常见的行为型模式有观察者模式、策略模式、命令模式等。</p>\\n</li>\\n</ul>","autoDesc":true}');export{g as comp,c as data};
