import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as t,c as l,b as e,d as s,e as d,w as r,a as c}from"./app-CLvzHtVY.js";const o={},p=c(`<h1 id="redis集群配置" tabindex="-1"><a class="header-anchor" href="#redis集群配置"><span>redis集群配置</span></a></h1><p>redis集群是对redis的水平扩容，即启动N个redis节点，将整个数据分布存储在这个N个节点中，每个节 点存储总数据的1/N。</p><p>redis集群的数量必须是偶数，每一个主机都要有从机，至少有三个主机，三个从机，如果主机宕机，那么从机会自动变为主机，如果宕机的主机再恢复正常，那么则作为从机使用，以此轮询。</p><p>如下图：由3台master和3台slave组成的redis集群，每台master承接客户端三分之一请求和写入的数 据，当master挂掉后，slave会自动替代master，做到高可用。</p><img src="https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220429214813865.png" alt="image-20220429214813865" style="zoom:67%;"><h2 id="_1、配置3主3从集群" tabindex="-1"><a class="header-anchor" href="#_1、配置3主3从集群"><span>1、配置3主3从集群</span></a></h2><p>此处配置为在同一太计算机上的配置，所以是通过修改端口号来实现的，实际应用不需要修改端口号，修改ip地址即可</p><p>集群配置：</p><table><thead><tr><th>角色</th><th>端口</th></tr></thead><tbody><tr><td>master</td><td>7001</td></tr><tr><td>master</td><td>7002</td></tr><tr><td>master</td><td>7003</td></tr><tr><td>slave</td><td>7004</td></tr><tr><td>slave</td><td>7005</td></tr><tr><td>slave</td><td>7006</td></tr></tbody></table><ol><li><p>创建一个目录<code>/opt/cluster</code>，用来安装集群的redis服务器。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> /opt/cluster
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>安装6台redis服务器在<code>/opt/cluster</code>中，分别安装在7001-7006文件夹。并将redis安装文件中的redis.conf文件复制到<code>/opt/cluster</code>中。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>cp /software/redis<span class="token punctuation">-</span>3.0.0/redis.conf /opt/cluster/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220430164854456.png" alt="image-20220430164854456" loading="lazy"></p></li><li><p>创建配置文件，这里的6个服务器的配置文件除了端口号外其他信息都是一致的，6个配置文件分别命名为<code>redis-7001.conf</code>.......<code>redis-7006</code>，配置的端口号和其他文件地址改变一下就可以 了（ip地址也要改成自己的ip），详细配置如下（以7001为例）：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 引入redis.conf文件</span>
include /opt/cluster/redis.conf
<span class="token comment"># 开启后台启动</span>
daemonize <span class="token function">yes</span>
<span class="token comment"># ip地址</span>
<span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.170.132

<span class="token function">dir</span> /opt/cluster/
<span class="token comment"># 端口</span>
port <span class="token number">7001</span>
<span class="token comment"># rdb文件</span>
dbfilename dump_7001.rdb
<span class="token comment"># pid文件</span>
pidfile /var/run/redis_7001.pid
<span class="token comment">#日志文件</span>
logfile <span class="token string">&quot;./7001.log&quot;</span>

<span class="token comment"># 开启集群设置</span>
cluster-enabled <span class="token function">yes</span>
<span class="token comment"># 设置节点配置文件</span>
cluster-config-file node-7001.conf
<span class="token comment"># 设置节点失联时间，超过该时间(毫秒)，集群自动进行主从切换</span>
cluster-node-timeout <span class="token number">15000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复制5份<code>redis-7001.conf</code>，把文件中的所有7001改为7002...7006即可。</p><p><img src="https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220430170506669.png" alt="image-20220430170506669" loading="lazy"></p></li><li><p>分别启动六个服务器（后台启动）</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>./redis-server /opt/cluster/redis-7001.conf
./redis-server /opt/cluster/redis-7002.conf 
./redis-server /opt/cluster/redis-7003.conf 
./redis-server /opt/cluster/redis-7004.conf 
./redis-server /opt/cluster/redis-7005.conf 
./redis-server /opt/cluster/redis-7006.conf 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查看集群的启动状态</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220430172754878.png" alt="image-20220430172754878" loading="lazy"></p></li><li><p>确保启动成功后，查看<code>/opt/cluster</code>中是否生成了六个<code>nodes-xxx.conf</code>文件</p><img src="https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220430173103208.png" alt="image-20220430173103208" style="zoom:50%;"></li><li><p>确保以上都信息都正常后，将6个节点合成一个集群。</p><p>如果redis的版本是<code>redis-5.0.0</code>及以上版本，可以直接使用bin目录中的<code>redis-cli</code>来创建集群：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>./redis-cli <span class="token parameter variable">--cluster</span> create --cluster-replicas <span class="token number">192.168</span>.170.132:7001 <span class="token number">192.168</span>.170.132:7002 <span class="token number">192.168</span>.170.132:7003 <span class="token number">192.168</span>.170.132:7004 <span class="token number">192.168</span>.170.132:7005 <span class="token number">192.168</span>.170.132:7006
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里使用的是<code>redis-3.0.0</code>，所以不能使用这种方式创建redis集群，需要使用<code>redis-3.0.0.gem</code>工具来创建redis集群。该工具安装：</p><ul><li><p>把下载该工具后上传到linux中的<code>/software</code>中。</p></li><li><p>进入<code>/software</code>目录，安装工具</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gem <span class="token function">install</span> redis-3.0.0.gem
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果直接安装的话会提示<code>-bash: gem: command not found</code>，这是因为该gem工具是用ruby语言编写的，所以需要先安装ruby语言的运行环境。联网安装即可。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> ruby
yum <span class="token function">install</span> rubygems
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>安装了ruby的运行环境后gem工具可以使用，此时把redis安装目录中的src目录里面的<code>redis-trib.rb</code>文件复制到<code>/opt/cluster</code>中</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code> <span class="token function">cp</span> /software/redis-3.0.0/src/redis-trib.rb /opt/cluster/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>继续配置redis的集群，<code>redis-5.0.0</code>以下的版本配置（使用gem工具创建集群）：</p><p>进入<code>/opt/cluster</code>目录，执行命令构建集群即可。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code> ./redis-trib.rb create <span class="token parameter variable">--replicas</span> <span class="token number">1</span> <span class="token number">192.168</span>.170.132:7001 <span class="token number">192.168</span>.170.132:7002 <span class="token number">192.168</span>.170.132:7003 <span class="token number">192.168</span>.170.132:7004 <span class="token number">192.168</span>.170.132:7005 <span class="token number">192.168</span>.170.132:7006
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意replicas后面有个1不要忘了。这里的1表示用最简单的方式创建配置集群，即每个master配置了一个salve。</p><p>至此，redis集群创建成功。</p></li><li><p>使用<code>redis-cli</code>登录7001，执行命令查看集群是否创建成功。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># -c表示以集群的方式登录</span>
./redis-cli <span class="token parameter variable">-h</span> <span class="token number">192.168</span>.170.132 <span class="token parameter variable">-p</span> <span class="token number">7001</span> <span class="token parameter variable">-c</span>

<span class="token comment">#登录后查看集群信息</span>
cluster nodes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220430180923814.png" alt="image-20220430180923814" loading="lazy"></p></li></ol><h2 id="_2、redis集群的节点分配原则" tabindex="-1"><a class="header-anchor" href="#_2、redis集群的节点分配原则"><span>2、redis集群的节点分配原则</span></a></h2><p>一个集群至少有3个主节点，因为新master的选举需要大于半数的集群master节点同意才能选举成功， 如果只有两个master节点，当其中一个挂了，是达不到选举新master的条件的。 选项--cluster-replicas 1表示我们希望为集群中的每个主节点创建一个从节点。 分配原则尽量保证每个主库运行在不同的ip，每个主库和从库不在一个ip上，这样才能做到高可用。</p><h2 id="_3、springboot整合redis集群" tabindex="-1"><a class="header-anchor" href="#_3、springboot整合redis集群"><span>3、springboot整合redis集群</span></a></h2>`,13),m=e("h2",{id:"_4、redis集群存储数据的原理",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_4、redis集群存储数据的原理"},[e("span",null,"4、redis集群存储数据的原理")])],-1),u=e("p",null,[s("通过网络将多台redis服务器连接在一起，形成redis集群后，系统将会产生16384个slots（哈希槽，slots是用于具体存储数据的空间，0-16383)，而数据库中的每个key都属于16384个slots中的其中1个，当通过key读写数据的时候，redis需要先根据 key计算出key对应的slots，然后根据slots和master的映射关系找到对应的redis节点，key对应的数据 就在这个节点上面。 集群中使用公式 "),e("code",null,"CRC16(key)%16384 "),s("计算key属于哪个槽。")],-1);function g(b,v){const a=i("RouteLink");return t(),l("div",null,[p,e("p",null,[s("见"),d(a,{to:"/database/redis/redis%E4%BD%BF%E7%94%A8.html"},{default:r(()=>[s("redis使用springboot中使用集群版")]),_:1}),s("。")]),m,u])}const k=n(o,[["render",g],["__file","集群配置.html.vue"]]),f=JSON.parse('{"path":"/database/redis/%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE.html","title":"集群配置","lang":"zh-CN","frontmatter":{"title":"集群配置","tags":["redis","数据库"],"order":"7","description":"redis集群配置 redis集群是对redis的水平扩容，即启动N个redis节点，将整个数据分布存储在这个N个节点中，每个节 点存储总数据的1/N。 redis集群的数量必须是偶数，每一个主机都要有从机，至少有三个主机，三个从机，如果主机宕机，那么从机会自动变为主机，如果宕机的主机再恢复正常，那么则作为从机使用，以此轮询。 如下图：由3台maste...","head":[["meta",{"property":"og:url","content":"https://gly-dragon.github.io/blog/blog/database/redis/%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE.html"}],["meta",{"property":"og:site_name","content":"龙哥不管事"}],["meta",{"property":"og:title","content":"集群配置"}],["meta",{"property":"og:description","content":"redis集群配置 redis集群是对redis的水平扩容，即启动N个redis节点，将整个数据分布存储在这个N个节点中，每个节 点存储总数据的1/N。 redis集群的数量必须是偶数，每一个主机都要有从机，至少有三个主机，三个从机，如果主机宕机，那么从机会自动变为主机，如果宕机的主机再恢复正常，那么则作为从机使用，以此轮询。 如下图：由3台maste..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220430164854456.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-01T02:17:41.000Z"}],["meta",{"property":"article:author","content":"龙哥不管事"}],["meta",{"property":"article:tag","content":"redis"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:modified_time","content":"2024-04-01T02:17:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"集群配置\\",\\"image\\":[\\"https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220430164854456.png\\",\\"https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220430170506669.png\\",\\"https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220430172754878.png\\",\\"https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220430180923814.png\\"],\\"dateModified\\":\\"2024-04-01T02:17:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"龙哥不管事\\",\\"url\\":\\"https://gly-dragon.github.io/blog/\\"}]}"]]},"headers":[{"level":2,"title":"1、配置3主3从集群","slug":"_1、配置3主3从集群","link":"#_1、配置3主3从集群","children":[]},{"level":2,"title":"2、redis集群的节点分配原则","slug":"_2、redis集群的节点分配原则","link":"#_2、redis集群的节点分配原则","children":[]},{"level":2,"title":"3、springboot整合redis集群","slug":"_3、springboot整合redis集群","link":"#_3、springboot整合redis集群","children":[]},{"level":2,"title":"4、redis集群存储数据的原理","slug":"_4、redis集群存储数据的原理","link":"#_4、redis集群存储数据的原理","children":[]}],"git":{"createdTime":1711937861000,"updatedTime":1711937861000,"contributors":[{"name":"龙哥不管事","email":"gly3498347531@163.com","commits":1}]},"readingTime":{"minutes":4.76,"words":1429},"filePathRelative":"database/redis/集群配置.md","localizedDate":"2024年4月1日","excerpt":"\\n<p>redis集群是对redis的水平扩容，即启动N个redis节点，将整个数据分布存储在这个N个节点中，每个节 点存储总数据的1/N。</p>\\n<p>redis集群的数量必须是偶数，每一个主机都要有从机，至少有三个主机，三个从机，如果主机宕机，那么从机会自动变为主机，如果宕机的主机再恢复正常，那么则作为从机使用，以此轮询。</p>\\n<p>如下图：由3台master和3台slave组成的redis集群，每台master承接客户端三分之一请求和写入的数 据，当master挂掉后，slave会自动替代master，做到高可用。</p>\\n<img src=\\"https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220429214813865.png\\" alt=\\"image-20220429214813865\\" style=\\"zoom: 67%;\\">","autoDesc":true}');export{k as comp,f as data};
