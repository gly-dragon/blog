import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DcIQTYkc.js";const e={},n=t(`<h2 id="面向过程和面向对象" tabindex="-1"><a class="header-anchor" href="#面向过程和面向对象"><span>面向过程和面向对象</span></a></h2><p>Java 是一门纯面向对象的语言(Object Oriented Program，简称 OOP)，在面向对象的世界里，一切皆为对象。面向对象是解决问题的一种思想，主要依靠对象之间的交互完成一件事情。用面向对象的思想来涉及程序，更符合人们对事物的认知，对于大型程序的设计、扩展以及维护都非常友好。</p><p><strong>面向过程</strong></p><p>面向过程编程（Procedural programming）是将程序视为一系列的过程或函数的集合，通过一步一步地执行这些过程来解决问题，注重的是<strong>过程</strong>，在整个过程中所涉及的行为，就是功能。面向过程强调的是顺序性和线性执行，即按照特定的顺序执行一系列的函数，数据和函数之间的联系较弱，函数通常使用全局变量或参数传递数据，对于复杂的问题，可能需要编写大量的函数来实现算法和逻辑。面向过程编程适用于简单的、直接的问题和算法，它注重解决问题的步骤和操作，对于程序的结构相对简单的情况下，可以提供较好的性能和效率。</p><p><strong>面向对象</strong></p><p>面向对象是一种程序设计范型，也是一种程序开发的方法。它以对象作为程序的基本单元，将程序和数据封装其中，以提高软件的重用性、灵活性和扩展性。面向对象的核心概念包括对象、类、继承、封装和消息传递等。对象是类的具体化实现，类是对具有相同属性和方法的对象的抽象。继承允许子类继承父类的属性和方法，实现代码的重用和扩展。封装是将数据和操作数据的代码捆绑在一起，隐藏内部细节，保护数据不被外部直接访问。消息传递是对象之间通信的方式，通过发送和接收消息来实现对象间的交互。</p><p>面向对象编程（OOP）的特点包括：</p><ul><li><strong>抽象：</strong> 从具体问题中抽象出一般概念，形成类和对象。</li><li><strong>封装：</strong> 将数据和对数据的操作封装在对象内部，隐藏内部实现细节。</li><li><strong>继承：</strong> 子类继承父类的属性和方法，实现代码的重用和扩展。</li><li><strong>多态：</strong> 允许以统一的方式处理不同类型的对象，提高代码的灵活性和可扩展性</li></ul><h2 id="类和对象的关系" tabindex="-1"><a class="header-anchor" href="#类和对象的关系"><span>类和对象的关系</span></a></h2><p>类是对象的抽象，是一个概念模型，是有相同特征和行为的对象的集合；对象是类的实例，是一个真实的模型，是一个具体的实体。对象的特征在类中的表现为属性，对象的的行为在类中的表现就是方法（属性描述特征，方法描述行为）。比如猫是一个类，拥有毛色、年龄、名称等属性（特征）以及吃东西的方法（动作），而具体某一只猫上（一只黄色、三岁、名叫团子的猫），这只猫就是一个对象，是猫这个类的一个实例。</p><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h2><p>一个类可以有属性和方法，在 Java 中，我们通常把属性称为变量，一个类中可以有一下类型变量：</p><p><strong>局部变量：</strong> 在方法或语句块中声明的变量称为局部变量，变量声明和初始化都在方法中，只能在声明这一变量的方法中使用，方法结束后变量就会自动销毁。</p><p><strong>成员变量：</strong> 也叫全局变量，成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量在声明后可以在类中任意方法或语句块中访问。</p><p><strong>类变量：</strong> 也叫静态变量，类变量也声明在类中，方法体之外，但必须声明为 static 类型，类变量不属于某个具体的对象，是所有对象共享的。</p><p><strong>【类变量的特性】</strong></p><ul><li><p>不属于某个具体的对象，是类的属性，所有对象共享的，不存储在某个对象的空间中</p></li><li><p>既可以通过对象访问，也可以通过类名访问，但一般更推荐使用类名访问</p></li><li><p>类变量存储在方法区当中</p></li><li><p>生命周期伴随类的一生(即：随类的加载而创建，随类的卸载而销毁)</p></li></ul><h2 id="构造方法" tabindex="-1"><a class="header-anchor" href="#构造方法"><span>构造方法</span></a></h2><p>构造方法是一个特殊的方法，其方法名称必须和类名相同，且不能指定返回值，在创建对象时，由编译器自动调用，并且在整个对象的生命周期内只调用一次。</p><blockquote><p>注意：构造方法的作用就是对对象中的成员进行初始化，并不负责给对象开辟空间。</p></blockquote><p><strong>【构造方法的特性】</strong></p><ul><li><p>名字必须与类名相同</p></li><li><p>没有返回值类型，设置为 void 也不行</p></li><li><p>创建对象时由编译器自动调用，并且在对象的生命周期内只调用一次(相当于人的出生，每个人只能出生一次)</p></li><li><p>构造方法可以重载(用户根据自己的需求提供不同参数的构造方法)</p></li><li><p>如果用户没有显式定义，编译器会生成一份默认的无参构造方法</p></li><li><p>构造方法中，可以通过 this 调用其他构造方法来简化代码，通过 this 调用其他构造方法时 this(...)必须是构造方法中的第一条语句</p></li></ul><h2 id="类的定义和实例化" tabindex="-1"><a class="header-anchor" href="#类的定义和实例化"><span>类的定义和实例化</span></a></h2><p><strong>定义类</strong></p><p>Java 中使用 class 关键字来定义类，比如</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> ClassName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> field</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(){}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>class</strong>是定义类的关键字，ClassName 为类名，{...}为类的主体，类中包含的内容称为类的变量（field）。</p><p><strong>实例化类</strong></p><p>定义了一个类，就相当于在计算机中定义了一种新的类型，用类类型创建对象的过程，称为类的实例化，在 java 中采用 new 关键字，配合类名来实例化对象，实例化对象是调用的是类的构造方法。在实例化对象后，可以通过<code>.</code>来调用对象中的属性和方法。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">ClassName</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> clazz </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> ClassName</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">clazz</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">field</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 使用类的属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">clazz</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">method</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 使用类的方法</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实例化类，也就是创建了一个对象，创建对象需要以下三步：</p><ul><li><strong>声明</strong> ：声明一个对象，包括对象名称和对象类型。</li><li><strong>实例化</strong> ：使用关键字 new 来创建一个对象。</li><li><strong>初始化</strong> ：使用 new 创建对象时，会调用构造方法初始化对象。</li></ul>`,32),l=[n];function r(p,h){return a(),s("div",null,l)}const g=i(e,[["render",r],["__file","类和对象.html.vue"]]),c=JSON.parse('{"path":"/%E4%B8%93%E9%A1%B9/Java%E4%B8%93%E9%A1%B9/Java%E5%9F%BA%E7%A1%80/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1.html","title":"类和对象","lang":"zh-CN","frontmatter":{"title":"类和对象","tags":["Java"],"order":"2","description":"面向过程和面向对象 Java 是一门纯面向对象的语言(Object Oriented Program，简称 OOP)，在面向对象的世界里，一切皆为对象。面向对象是解决问题的一种思想，主要依靠对象之间的交互完成一件事情。用面向对象的思想来涉及程序，更符合人们对事物的认知，对于大型程序的设计、扩展以及维护都非常友好。 面向过程 面向过程编程（Procedu...","head":[["meta",{"property":"og:url","content":"https://gly-dragon.github.io/blog/blog/%E4%B8%93%E9%A1%B9/Java%E4%B8%93%E9%A1%B9/Java%E5%9F%BA%E7%A1%80/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1.html"}],["meta",{"property":"og:site_name","content":"龙哥不管事"}],["meta",{"property":"og:title","content":"类和对象"}],["meta",{"property":"og:description","content":"面向过程和面向对象 Java 是一门纯面向对象的语言(Object Oriented Program，简称 OOP)，在面向对象的世界里，一切皆为对象。面向对象是解决问题的一种思想，主要依靠对象之间的交互完成一件事情。用面向对象的思想来涉及程序，更符合人们对事物的认知，对于大型程序的设计、扩展以及维护都非常友好。 面向过程 面向过程编程（Procedu..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-18T09:31:12.000Z"}],["meta",{"property":"article:author","content":"龙哥不管事"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:modified_time","content":"2024-06-18T09:31:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"类和对象\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-18T09:31:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"龙哥不管事\\",\\"url\\":\\"https://gly-dragon.github.io/blog/\\"}]}"]]},"headers":[{"level":2,"title":"面向过程和面向对象","slug":"面向过程和面向对象","link":"#面向过程和面向对象","children":[]},{"level":2,"title":"类和对象的关系","slug":"类和对象的关系","link":"#类和对象的关系","children":[]},{"level":2,"title":"变量","slug":"变量","link":"#变量","children":[]},{"level":2,"title":"构造方法","slug":"构造方法","link":"#构造方法","children":[]},{"level":2,"title":"类的定义和实例化","slug":"类的定义和实例化","link":"#类的定义和实例化","children":[]}],"git":{"createdTime":1718703072000,"updatedTime":1718703072000,"contributors":[{"name":"龙哥不管事","email":"gly3498347531@163.com","commits":1}]},"readingTime":{"minutes":5.77,"words":1731},"filePathRelative":"专项/Java专项/Java基础/类和对象.md","localizedDate":"2024年6月18日","excerpt":"<h2>面向过程和面向对象</h2>\\n<p>Java 是一门纯面向对象的语言(Object Oriented Program，简称 OOP)，在面向对象的世界里，一切皆为对象。面向对象是解决问题的一种思想，主要依靠对象之间的交互完成一件事情。用面向对象的思想来涉及程序，更符合人们对事物的认知，对于大型程序的设计、扩展以及维护都非常友好。</p>\\n<p><strong>面向过程</strong></p>\\n<p>面向过程编程（Procedural programming）是将程序视为一系列的过程或函数的集合，通过一步一步地执行这些过程来解决问题，注重的是<strong>过程</strong>，在整个过程中所涉及的行为，就是功能。面向过程强调的是顺序性和线性执行，即按照特定的顺序执行一系列的函数，数据和函数之间的联系较弱，函数通常使用全局变量或参数传递数据，对于复杂的问题，可能需要编写大量的函数来实现算法和逻辑。面向过程编程适用于简单的、直接的问题和算法，它注重解决问题的步骤和操作，对于程序的结构相对简单的情况下，可以提供较好的性能和效率。</p>","autoDesc":true}');export{g as comp,c as data};
