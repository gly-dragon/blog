import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as n,a}from"./app-J2yYuQKr.js";const i={},l=a(`<h1 id="redis的主从复制" tabindex="-1"><a class="header-anchor" href="#redis的主从复制"><span>redis的主从复制</span></a></h1><p>redis的主从复制是值主机更新后根据配置和策略，自动同步到备机的master/slave机制，Master以写为主，Slave以读为 主。一个master可以有多个slave。</p><p>通过主从复制可以实现：</p><ul><li>读写分离，性能扩展，降低主服务器的压力</li><li>容灾，快速恢复，主机挂掉时，从机变为主机</li></ul><img src="https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220429174033002.png" alt="image-20220429174033002" style="zoom:50%;"><p>**使用主从复制的原因：**避免单点故障。</p><blockquote><p>单点故障：指由于redis服务器无法正常访问，导致redis存储的数据无法读取</p></blockquote><p>配置了主从复制的redis，主机可以读数据，也可以写入数据，但是从机只能读数据，不能写数据。</p><h2 id="_1、配置主1从2" tabindex="-1"><a class="header-anchor" href="#_1、配置主1从2"><span>1、配置主1从2</span></a></h2><p>此处通过配置不同的端口号来区分主机和从机，实际应用是在不同的服务器上配置ip地址来实现。这里配置3台机器，主1从2。</p><table><thead><tr><th>角色</th><th>端口</th></tr></thead><tbody><tr><td>master（主</td><td>6379</td></tr><tr><td>slave1（从）</td><td>6380</td></tr><tr><td>slave2（从）</td><td>6381</td></tr></tbody></table><img src="https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220429183802177.png" alt="image-20220429183802177" style="zoom:50%;"><p><strong>主从复制原理：</strong></p><ul><li>slave启动成功连接到master后，会给master发送数据同步消息（发送sync命令）</li><li>master接收到slave发来的数据同步消息后，把主服务器的数据进行持久化到rdb文件，同时会收集接收到的用于修改数据的命令，master将传rdb文件发送给你slave，完成一次完全同步</li><li>全量复制：而slave服务在接收到master发来的rdb文件后，将其存盘并加载到内存</li><li>增量复制：master继续将收集到的修改命令依次传给slave，完成同步 但是只要重新连接master，一次完全同步（全量复制）将会被自动执行</li></ul><img src="https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220429195414604.png" alt="image-20220429195414604" style="zoom:50%;"><h3 id="_1-1、通过配置文件配置" tabindex="-1"><a class="header-anchor" href="#_1-1、通过配置文件配置"><span>1.1、通过配置文件配置</span></a></h3><ol><li><p>创建工作目录</p><p>通过命令创建目录，本次所有操作均在此目录中执行</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> /opt/master-slave
<span class="token builtin class-name">cd</span> /opt/master-slave/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>安装三台redis服务器在master-slave目录中，分别是6379,6380,6381（为了区分是哪台机器）。</p><p><img src="https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220429191008541.png" alt="image-20220429191008541" loading="lazy"></p></li><li><p>进入redis安装文件目录把redis安装文件里的redis.conf文件复制到master-slave目录</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cp</span> redis.conf /opt/master-slave/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建master（主机）的配置文件<code>redis-6379.cof</code>，内容如下</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># redis.conf是redis原配置文件，内部包含了很多默认的配置，这里使用include将其引用，相当于把redis.conf内容直接贴进来了</span>
include /opt/master-slave/redis.conf
<span class="token comment"># 使用后台启动</span>
daemonize <span class="token function">yes</span>
<span class="token comment"># 配置ip地址</span>
<span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.170.131
<span class="token comment"># 配置密码</span>
requirepass <span class="token number">123456</span>
<span class="token function">dir</span> /opt/master-slave/
logfile /opt/master-slave/6379.log
<span class="token comment"># 端口</span>
port <span class="token number">6379</span>
<span class="token comment">#rdb文件</span>
dbfilename dump_6379.rdb
<span class="token comment"># pid文件</span>
pidfile /var/run/redis_6379.pid
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建slave1（从机）的配置文件<code>redis-6380.conf</code>，主要内容和master一致，只是多了从机的配置信息，内容如下</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>include /opt/master-slave/redis.conf
daemonize <span class="token function">yes</span>
<span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.170.131
requirepass <span class="token number">123456</span>
<span class="token function">dir</span> /opt/master-slave/
port <span class="token number">6380</span>
dbfilename dump_6380.rdb
pidfile /var/run/redis_6380.pid
logfile /opt/master-slave/6380.log

<span class="token comment"># 用来指定主机：slaveof 主机ip 端口</span>
slaveof <span class="token number">192.168</span>.170.131 <span class="token number">6379</span>
<span class="token comment"># 主机的密码</span>
masterauth <span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建slave2（从机）的配置文件<code>redis-6381.conf</code>，内容如下</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>include /opt/master-slave/redis.conf
daemonize <span class="token function">yes</span>
<span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.170.131
requirepass <span class="token number">123456</span>
<span class="token function">dir</span> /opt/master-slave/
port <span class="token number">6381</span>
dbfilename dump_6381.rdb
pidfile /var/run/redis_6381.pid
logfile /opt/master-slave/6381.log

<span class="token comment"># 用来指定主机：slaveof 主机ip 端口</span>
slaveof <span class="token number">192.168</span>.170.131 <span class="token number">6379</span>
<span class="token comment"># 主机的密码</span>
masterauth <span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>分别进入主从机的bin目录，后台启动主机和从机。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 启动主机</span>
./redis-server /opt/master-slave/redis-6379.conf

<span class="token comment">#启动slave1</span>
./redis-server /opt/master-slave/redis-6380.conf
<span class="token comment">#启动slave2</span>
./redis-server /opt/master-slave/redis-6381.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查看是否启动成功，如果启动失败说明配置文件出错，查看配置文件配置即可</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code> <span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220429194616621.png" alt="image-20220429194616621" style="zoom:67%;"><p>显示如上信息则配置成功。</p></li><li><p>进入任意一个主机的bin目录，使用redis-cli连接上redis主机（master）</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code> ./redis-cli <span class="token parameter variable">-h</span> <span class="token number">192.168</span>.170.131 <span class="token parameter variable">-p</span> <span class="token number">6379</span> <span class="token parameter variable">-a</span> <span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输入<code>info Replication</code>查看主机信息</p><img src="https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220429195145692.png" alt="image-20220429195145692" style="zoom:80%;"></li><li><p>存入数据进行验证，登录主机存入的数据在从机上会自动复制</p></li></ol><h3 id="_1-2、通过命令配置主1从2" tabindex="-1"><a class="header-anchor" href="#_1-2、通过命令配置主1从2"><span>1.2、通过命令配置主1从2</span></a></h3><ol><li><p>主从机的安装和上面通过配置文件配置一样，这里的配置文件里就不需要配置从机的<code>slaveof</code>属性而是通过命令完成主从配置。三个配置文件的信息只需要删除从机的下列配置即可</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 用来指定主机：slaveof 主机ip 端口</span>
slaveof <span class="token number">192.168</span>.170.131 <span class="token number">6379</span>
<span class="token comment"># 主机的密码</span>
masterauth <span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>分别启动三台机器，同上述第7步。</p></li><li><p>分别登录两台从机（6380和6381），设置master的密码并指定主机</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 登录从机</span>
redis-cli <span class="token parameter variable">-h</span> <span class="token number">192.168</span>.200.129 <span class="token parameter variable">-p</span> <span class="token number">6380</span> <span class="token parameter variable">-a</span> <span class="token number">123456</span>

<span class="token comment">#设置主机密码，因为主机是有密码的，所以需要指定masterauth的密码才可以同步数据</span>
config <span class="token builtin class-name">set</span> masterauth <span class="token number">123456</span>
<span class="token comment">#设置该机器为master的从机</span>
slaveof <span class="token number">192.168</span>.170.131 <span class="token number">6379</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_2、哨兵模式" tabindex="-1"><a class="header-anchor" href="#_2、哨兵模式"><span>2、哨兵模式</span></a></h2><p>反客为主的自动版，能够自动监控master是否发生故障，如果故障了会根据投票数从slave中挑选一个 作为master，其他的slave会自动转向同步新的master，实现故障自动转义。</p><blockquote><p>反客为主：当master挂掉之后，我们可以从slave中选择一个作为主机。登录从机执行下列命令即可</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>slaveof no one
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时slave1就变成主机了，然后再去其他slave上面执行 slaveof 命令将其挂在slave1上。</p><p>这种主备切换有个缺点：需要手动去执行命令去操作，不是太方便。</p></blockquote><p><strong>原理：<strong>sentinel会按照指定的频率给master发送ping请求，看看master是否还活着，若master在指定时间内未 正常响应sentinel发送的ping请求，sentinel则认为master挂掉了，但是这种情况存在误判的可能，比 如：可能master并没有挂，只是sentinel和master之间的网络不通导致，导致ping失败。 为了避免误判，通常会启动多个sentinel，一般是奇数个，比如3个，那么可以指定当有多个sentinel都 觉得master挂掉了，此时才断定master真的挂掉了，通常这个值设置为sentinel的一半，比如sentinel 的数量是3个，那么这个量就可以设置为2个。当多个sentinel经过判定，断定master确实挂掉了，接下来sentinel会进行故障转移：会从slave中</strong>投票</strong>选出一个服务器，将其升级为新的主服务器， 并让失效主服务器的其他从服务器slaveof指向新的主服务 器； 当客户端试图连接失效的主服务器时， 集群也会向客户端返回新主服务器的地址， 使得集群可以 使用新主服务器代替失效服务器。</p><h3 id="_2-1、配置1主2从3个哨兵" tabindex="-1"><a class="header-anchor" href="#_2-1、配置1主2从3个哨兵"><span>2.1、配置1主2从3个哨兵</span></a></h3><p>这里演示在同一个机子上配置，通过改端口号来实现1主2从3个哨兵的配置。节点配置信息：</p><table><thead><tr><th>角色</th><th>端口</th></tr></thead><tbody><tr><td>master</td><td>6379</td></tr><tr><td>slave1</td><td>6380</td></tr><tr><td>slave1</td><td>6381</td></tr><tr><td>sentinel1</td><td>6382</td></tr><tr><td>sentinel2</td><td>6383</td></tr><tr><td>sentinel3</td><td>6384</td></tr></tbody></table><p>这里的主机和从机可以使用上面配置好的主从机，直接配置哨兵即可。哨兵也是redis服务器，所以这里还需要安装三个redis，也安装在<code>/opt/master-slave</code>目录中即可。</p><ol><li><p>配置sentinel1的配置文件：sentinel-6382：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 配置文件目录</span>
<span class="token function">dir</span> /opt/master-slave/
<span class="token comment"># 日志文件位置</span>
logfile <span class="token string">&quot;./sentinel-26379.log&quot;</span>
<span class="token comment"># pid文件</span>
pidfile /var/run/sentinel_26379.pid
<span class="token comment"># 是否后台运行</span>
daemonize <span class="token function">yes</span>
<span class="token comment"># 端口</span>
port <span class="token number">6382</span>
<span class="token comment"># 监控主服务器master的名字：mymaster，IP：192.168.170.131，port：6379，最后的数字2表示当Sentinel集群中有2个Sentinel认为master存在故障不可用，则进行自动故障转移</span>
sentinel monitor mymaster <span class="token number">192.168</span>.170.131 <span class="token number">6379</span> <span class="token number">2</span>
<span class="token comment"># master响应超时时间（毫秒），Sentinel会向master发送ping来确认master，如果在20秒内，ping不通master，则主观认为master不可用</span>
sentinel down-after-milliseconds mymaster <span class="token number">60000</span>
<span class="token comment"># 故障转移超时时间（毫秒），如果3分钟内没有完成故障转移操作，则视为转移失败</span>
sentinel failover-timeout mymaster <span class="token number">180000</span>
<span class="token comment"># 故障转移之后，进行新的主从复制，配置项指定了最多有多少个slave对新的master进行同步，那可以理解为1是串行复制，大于1是并行复制</span>
sentinel parallel-syncs mymaster <span class="token number">1</span>
<span class="token comment"># 指定mymaster主的密码（没有就不指定）</span>
sentinel auth-pass mymaster <span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>sentinel2和sentinel3与sentinel1的配置只有端口号不同，所以直接复制sentinel-6382后修改端口号即可</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># sentinel2的配置</span>
<span class="token function">cp</span> sentinel-6382.conf sentinel-6383.conf
<span class="token comment"># sentinel3的配置</span>
<span class="token function">cp</span> sentinel-6382.conf sentinel-6384.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用vi命令分别进入<code>sentinel-6383.conf</code>和<code>sentinel-6384.conf</code>，修改<code>port</code>为<code>6383</code>和<code>6384</code>。</p></li><li><p>启动3个sentinel</p><p>启动sentinel有两种方式</p><ul><li>方式1：./redis-server sentinel.conf --sentinel</li><li>方式2：redis-sentinel sentinel.conf</li></ul><p>这里使用方式2来启动3个sentinel，分别进入到sentinel的bin目录，执行命令启动</p><p><img src="https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220429211621413.png" alt="image-20220429211621413" loading="lazy"></p></li><li><p>查看sentinel的信息，这里以sentinel1为例：</p><p><img src="https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220429212050276.png" alt="image-20220429212050276" loading="lazy"></p></li><li><p>验证故障转移：在master中执行命令，停止master</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>192.168.170.131<span class="token punctuation">:</span>6379<span class="token punctuation">&gt;</span> shutdown
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>等待两分钟，让系统完成故障转移。</p><p>之后查看slave1的主从信息，可以看到，现在该从机已经成为了主机，但是有的时候是另一个从机变成主机。</p><p><img src="https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220429213840843.png" alt="image-20220429213840843" loading="lazy"></p></li><li><p>这时候如果旧的主机（6379）重新恢复工作，那么6379会成为一个从机。</p></li></ol><h3 id="_2-2、springboot整合sentinel" tabindex="-1"><a class="header-anchor" href="#_2-2、springboot整合sentinel"><span>2.2、springboot整合sentinel</span></a></h3><p>导入架包之类的就不说了，只需要在application.yml中配置如下代码：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># redis sentinel主服务名，来源于：sentinel配置文件中sentinelmonitor后面跟的那个名称</span>
<span class="token assign-left variable">spring.redis.sentinel.master</span><span class="token operator">=</span>mymaster
<span class="token comment"># sentinel节点列表(host:port)，多个之间用逗号隔开</span>
<span class="token assign-left variable">spring.redis.sentinel.nodes</span><span class="token operator">=</span><span class="token number">192.168</span>.170.131:8082,192.168.170.131:8083,192.168.170.131:8084
<span class="token comment"># sentinel密码</span>
<span class="token comment">#spring.redis.sentinel.password=</span>
<span class="token comment"># 连接超时时间（毫秒）</span>
<span class="token assign-left variable">spring.redis.timeout</span><span class="token operator">=</span><span class="token number">60000</span>
<span class="token comment"># Redis默认情况下有16个分片，这里配置具体使用的分片，默认是0</span>
<span class="token assign-left variable">spring.redis.database</span><span class="token operator">=</span><span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置这些信息即可，其他用法与redis使用中springboot中使用一致。</p>`,32),t=[l];function d(r,c){return e(),n("div",null,t)}const m=s(i,[["render",d],["__file","主从复制.html.vue"]]),v=JSON.parse('{"path":"/database/redis/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6.html","title":"主从复制","lang":"zh-CN","frontmatter":{"title":"主从复制","tags":["redis","数据库"],"order":"6","description":"redis的主从复制 redis的主从复制是值主机更新后根据配置和策略，自动同步到备机的master/slave机制，Master以写为主，Slave以读为 主。一个master可以有多个slave。 通过主从复制可以实现： 读写分离，性能扩展，降低主服务器的压力 容灾，快速恢复，主机挂掉时，从机变为主机 image-20220429174033002...","head":[["meta",{"property":"og:url","content":"https://gly-dragon.github.io/blog/blog/database/redis/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"书元"}],["meta",{"property":"og:title","content":"主从复制"}],["meta",{"property":"og:description","content":"redis的主从复制 redis的主从复制是值主机更新后根据配置和策略，自动同步到备机的master/slave机制，Master以写为主，Slave以读为 主。一个master可以有多个slave。 通过主从复制可以实现： 读写分离，性能扩展，降低主服务器的压力 容灾，快速恢复，主机挂掉时，从机变为主机 image-20220429174033002..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220429191008541.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-01T02:17:41.000Z"}],["meta",{"property":"article:author","content":"龙哥不管事"}],["meta",{"property":"article:tag","content":"redis"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:modified_time","content":"2024-04-01T02:17:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"主从复制\\",\\"image\\":[\\"https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220429191008541.png\\",\\"https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220429211621413.png\\",\\"https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220429212050276.png\\",\\"https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220429213840843.png\\"],\\"dateModified\\":\\"2024-04-01T02:17:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"龙哥不管事\\",\\"url\\":\\"https://gly-dragon.github.io/blog/\\"}]}"]]},"headers":[{"level":2,"title":"1、配置主1从2","slug":"_1、配置主1从2","link":"#_1、配置主1从2","children":[{"level":3,"title":"1.1、通过配置文件配置","slug":"_1-1、通过配置文件配置","link":"#_1-1、通过配置文件配置","children":[]},{"level":3,"title":"1.2、通过命令配置主1从2","slug":"_1-2、通过命令配置主1从2","link":"#_1-2、通过命令配置主1从2","children":[]}]},{"level":2,"title":"2、哨兵模式","slug":"_2、哨兵模式","link":"#_2、哨兵模式","children":[{"level":3,"title":"2.1、配置1主2从3个哨兵","slug":"_2-1、配置1主2从3个哨兵","link":"#_2-1、配置1主2从3个哨兵","children":[]},{"level":3,"title":"2.2、springboot整合sentinel","slug":"_2-2、springboot整合sentinel","link":"#_2-2、springboot整合sentinel","children":[]}]}],"git":{"createdTime":1711937861000,"updatedTime":1711937861000,"contributors":[{"name":"龙哥不管事","email":"gly3498347531@163.com","commits":1}]},"readingTime":{"minutes":8.49,"words":2548},"filePathRelative":"database/redis/主从复制.md","localizedDate":"2024年4月1日","excerpt":"\\n<p>redis的主从复制是值主机更新后根据配置和策略，自动同步到备机的master/slave机制，Master以写为主，Slave以读为 主。一个master可以有多个slave。</p>\\n<p>通过主从复制可以实现：</p>\\n<ul>\\n<li>读写分离，性能扩展，降低主服务器的压力</li>\\n<li>容灾，快速恢复，主机挂掉时，从机变为主机</li>\\n</ul>\\n<img src=\\"https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220429174033002.png\\" alt=\\"image-20220429174033002\\" style=\\"zoom:50%;\\">","autoDesc":true}');export{m as comp,v as data};
