import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,o as i,a as s}from"./app-C_j7kzLk.js";const o={},t=s('<h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><p>Redis 中存在多种数据类型，但其中五种最重要，最常用：</p><ul><li><strong>string（字符串）:</strong> 基本的数据存储单元，可以存储字符串、整数或者浮点数</li><li><strong>hash（哈希/散列）:</strong> 一个键值对集合，可以存储多个字段。（map 类型，一个键可以包含多个字段，每个字段有自己的值）</li><li><strong>list（列表）:</strong> 一个简单的列表，可以存储一系列的字符串元素</li><li><strong>set（集合）:</strong> 一个无序集合，可以存储不重复的字符串元素</li><li><strong>zset(sorted set：有序集合):</strong> 类似于集合，但是每个元素都有一个分数（score）与之关联</li></ul><p>此外，Redis 中还存在一些特殊数据类型：</p><ul><li><strong>位图（Bitmaps）：</strong> 基于字符串类型，可以对每个位进行操作。</li><li><strong>超日志（HyperLogLogs）:</strong> 用于基数统计，可以估算集合中的唯一元素数量。</li><li><strong>地理空间（Geospatial）：</strong> 用于存储地理位置信息。</li><li><strong>发布/订阅（Pub/Sub）：</strong> 一种消息通信模式，允许客户端订阅消息通道，并接收发布到该通道的消息。</li><li><strong>流（Streams）：</strong> 用于消息队列和日志存储，支持消息的持久化和时间排序。</li><li><strong>模块（Modules）：</strong> Redis 支持动态加载模块，可以扩展 Redis 的功能。</li></ul><p><em>redis 的数据类型名均为小写</em></p><h2 id="string-字符串" tabindex="-1"><a class="header-anchor" href="#string-字符串"><span>string（字符串）</span></a></h2><p>string 是 redis 最基本的类型，一个 key 对应一个 value,string 类型是二进制安全的,所以 string 可以包含任何数据，比如 jpg 图片或者序列化的对象，string 类型的值最大能存储 512MB。</p><p><strong>数据结构：</strong> String 的数据结构为简单动态字符串（Simple Dynamic String，缩写 SDS）。是可以修改的字符串，内部结构上类似于 Java 的 ArrayList，采用分配冗余空间的方式来减少内存的频繁分配，字符串最大长度为 512MB。</p><p><strong>常用命令：</strong></p><ul><li><code>set key val</code>：设置键的值</li><li><code>get key</code>：获取键的值</li><li><code>incr key</code>：将键的值加 1</li><li><code>decr key</code>：将键的值减 1</li><li><code>append key val</code>：将值追加到键的值之后</li><li><code>mset key1 val1 key2 val2 ……</code>：一次存多个键值</li><li><code>mget key1 key2 ……</code>：一次取多个键</li><li><code>strlen key</code>：判断键对于的值字符串长度</li><li><code>del key</code>：删除键</li><li><code>setnx key val</code>：键不存在时设置键的值，存在时返回 0，设置失败</li><li><code>getrange key start end</code>：截取字符串</li><li><code>setrange key index val</code>：覆盖指定位置的值</li><li><code>setex key time val</code> :设置键过期时间</li><li><code>getset key val</code>：以新换旧，设置新值同时返回旧值</li></ul><h2 id="hash-哈希-散列" tabindex="-1"><a class="header-anchor" href="#hash-哈希-散列"><span>hash（哈希/散列）</span></a></h2><p>Redis hash 是一个键值对集合。 Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。 类似于 java 里面的 Map，每个哈希最多可以存储 2<sup>32</sup> - 1 个键值对。</p><p><strong>数据结构：</strong> Hash 类型对应的数据结构是 2 中：ziplist（压缩列表），hashtable（哈希表）。 当 field-value 长度较短个数较少时，使用 ziplist，否则使用 hashtable</p><p><strong>常用命令：</strong></p><ul><li><code>hset key field val</code>：设置哈希表中字段的值</li><li><code>hget key field</code>：获取哈希表中字段的值</li><li><code>hgetall key</code>：获取哈希表中所有字段和值</li><li><code>hdel key field</code>：删除哈希表中一个或多个字段</li><li><code>hmset key field1 val1 field2 val2 ……</code>：一次存多个字段、值</li><li><code>hmget key field1 field2 ……</code>：一次取多个字段值</li><li><code>hkeys key</code>：获得键中包含的所有字段</li><li><code>hvals key</code>：获得键中包含的所有值</li><li><code>hexists key field</code>：判断键中是否包含某一个字段</li><li><code>hlen key</code>：获得所有字段的数量</li><li><code>hincrby key field 增量</code>：给字段的值加上指定增量</li><li><code>hsetnx key field val</code>：当字段不存在时，设置字段值</li></ul><h2 id="list-列表" tabindex="-1"><a class="header-anchor" href="#list-列表"><span>list（列表）</span></a></h2><p>redis 列表是简单的字符串列表，按照插入顺序排序，可以添加一个元素到列表的头部（左边）或者尾部（右边）。它的底层实际上是使用双向链表实现的，对两端的操作性能很高，通过索引下标操作中间节点性能会较差，列表最多可以存储 2<sup>32</sup> - 1 个元素</p><p><strong>数据结构：</strong> List 的数据结构为快速链表 quickList， 首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是 ziplist，也就是压缩列表。 它将所有的元素紧挨着一起存储，分配的是一块连续的内存。 当就比较多的时候才会改成 quickList。</p><p><strong>常用命令：</strong></p><ul><li><code>lpush key val1 val2 ……</code>：将值插入到列表头部</li><li><code>rpush key val1 val2 ……</code>：将值插入到列表尾部</li><li><code>lpop key</code>：移出并获取列表第一个元素</li><li><code>rpop key</code>：移出并获取列表最后一个元素</li><li><code>llen key</code>：获得列表中的元素个数</li><li><code>lrange key start end</code>：从列表头部获取指定范围内的值</li><li><code>rpoplpush key key</code>：从列表尾部取出一个值放入另一个列表</li><li><code>lindex key index</code>：从头部获取指定索引位置的元素</li><li><code>linsert key before|after key val</code>：在某个值的前或者后插入一个新值</li><li><code>lrem key 数量 val</code>：删除指定数量的某个元素</li><li><code>lset key index val</code>：替换指定位置的值，操作成功返回<code>ok</code>，失败无错误信息</li></ul><h2 id="set-集合" tabindex="-1"><a class="header-anchor" href="#set-集合"><span>set（集合）</span></a></h2><p>set 类型存放的数据无序排列，不允许有重复元素，取值时是随机取，取一个少一个。</p><p>set 是 string 类型的无序集合，他的底层实际是一个 value 为 null 的 hash 表，收益添加，删除，查 找复杂度都是 O(1)。 一个算法，如果时间复杂度是 O(1)，那么随着数据的增加，查找数据的时间不变，也就是不管数据多 少，查找时间都是一样的。一个set集合最多可以存储2<sup>32</sup>- 1个元素</p><p><strong>数据结构：</strong> set 数据结构是字典，字典是用 hash 表实现的。 Java 中的 HashSet 的内部实现使用 HashMap，只不过所有的 value 都指向同一个对象。 Redis 的 set 结构也是一样的，它的内部也使用 hash 结构，所有的 value 都指向同一个内部值。</p><p><strong>常用命令：</strong></p><ul><li><code>sadd key val1 val2 ……</code>：向集合中添加一个或多个值</li><li><code>srem key val1 val2 ……</code>：移出集合中一个或多个值</li><li><code>smembers key</code>：取出集合中所有元素</li><li><code>sismember key val</code>：判断集合中是否有某个值</li><li><code>spop key</code>：从集合中随机取一个元素</li><li><code>scard key</code>：获取集合中的元素个数</li><li><code>spop key number</code>：随机取多个值</li><li><code>srandmember key number</code>：随机取多个值，不会从集合中删除</li><li><code>smove key1 key2 val</code>：将元素从一个集合移动到另一个集合，成功返回1，失败返回0</li><li><code>sinter key1 key1 ……</code>：取多个集合的交集</li><li><code>sinterstore key1 key2 ……</code>：将多个集合的交集放到一个新的集合中</li><li><code>sunion key1 key2 ……</code>：取多个集合的并集，自动去重</li><li><code>sunionstore key1 key2 ……</code>：将多个集合的并集放到一个新的集合中</li><li><code>sdiff key1 key2 ……</code>：取多个集合的差集</li><li><code>sdiffstore key1 key2 ……</code>：将多个集合的差集放到一个新的集合中</li></ul><h2 id="zset-sorted-set-有序集合" tabindex="-1"><a class="header-anchor" href="#zset-sorted-set-有序集合"><span>zset（sorted set：有序集合)</span></a></h2><p>redis 有序集合 zset 与普通集合 set 非常相似，是一个没有重复元素的字符串集合。 不同之处是有序集合的每个成员都关联了一个double类型的评分（score），这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。 集合的成员是唯一的，但是评分是可以重复的。</p><p><strong>数据结构：</strong> zset 内部使用了两种数据结构，分别是 hash 表和跳表。</p><p><strong>常用方法：</strong></p><ul><li><code>zadd key score1 val1 score2 val2</code>：向有序集合添加一个或多个成员，或更新已存在成员的分数</li><li><code>zrange key start stop [withscores]</code>：遍历指定范围内的成员（升序，降序用<code>zrevrange</code>），可选参数withscores在遍历时显示分数，<code>zrange 0 -1</code>遍历所有元素</li><li><code>zrem key val1 val2 ……</code>：移出有序集合中一个或多个元素</li><li><code>zrangebyscore key score1 score2</code>：按分数升序排列，获取指定分数范围的数据，降序用<code>zrevrangebyscore</code></li><li><code>zincrby key 增量 val</code>：为指定元素的分数加上指定增量</li><li><code>zremrangebyrank key start stop</code>：删除有序集合下标范围内的元素（包括开始、结束下标）</li><li><code>zremrangebyscore key score1 score2</code>：删除有序集合分数范围内的元素</li><li><code>zcount key score1 score2</code>：获取指定分数范围内的元素个数</li><li><code>zrank key val</code>：按分数升序排列，返回某个元素在有序集合中的排名，降序排列用<code>zrevrank</code></li><li><code>zscore key val</code>：获取指定元素的分数</li></ul><h2 id="hyperloglog" tabindex="-1"><a class="header-anchor" href="#hyperloglog"><span>HyperLogLog</span></a></h2><p>Redis HyperLogLog 是用来做基数统计的算法，常用于统计唯一值的近似值，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的</p><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2<sup>64</sup>个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比</p><p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p><p><strong>什么是基数</strong></p><p>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数</p><p><strong>常用命令：</strong></p><ul><li><code>pfadd key el1 el2 ……</code>：将元素添加到HyperLogLog中</li><li><code>pfcount key1 key2 ……</code>：返回给定 HyperLogLog 的基数估算值，如果是多个key，返回基数估值之和</li><li><code>pfmerge destkey sourcekey1 sourcekey2 ……</code>：将多个HyperLogLog合并为一个</li></ul><h2 id="bitmaps" tabindex="-1"><a class="header-anchor" href="#bitmaps"><span>Bitmaps</span></a></h2><ul><li>位数组，可以对字符串进行位操作</li><li>常用于实现布隆过滤器等位操作</li></ul><h2 id="geospatial-indexes" tabindex="-1"><a class="header-anchor" href="#geospatial-indexes"><span>Geospatial Indexes</span></a></h2><ul><li>处理地理空间数据，支持地理空间索引和半径查询</li></ul><h2 id="streams" tabindex="-1"><a class="header-anchor" href="#streams"><span>Streams</span></a></h2><ul><li>日志数据类型，支持时间序列数据</li><li>用于消息队列和实时数据处理</li></ul><h2 id="redis-数据库操作的一些方法" tabindex="-1"><a class="header-anchor" href="#redis-数据库操作的一些方法"><span>redis 数据库操作的一些方法</span></a></h2><ol><li>清空所有数据：flushall</li><li>清空当前数据库：flushdb</li><li>查询有哪些键：keys *</li><li>删除某一个键：del 键</li><li>判断是否存在某一个键: exists 键</li><li>判断当前值的数据类型： type 键</li><li>设置存放数据的过期时间（默认永不过期）：expire 键 秒（前提：键存在）</li><li>查看某一个键的过期时间 ttl 键</li><li>切换数据库：select dbindex</li><li>查看当前数据库键的数量：dbsize</li></ol>',48),r=[t];function d(a,c){return i(),l("div",null,r)}const g=e(o,[["render",d],["__file","数据类型.html.vue"]]),h=JSON.parse('{"path":"/%E4%B8%93%E9%A1%B9/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html","title":"数据类型","lang":"zh-CN","frontmatter":{"title":"数据类型","tags":["redis","数据库"],"order":"2","description":"数据类型 Redis 中存在多种数据类型，但其中五种最重要，最常用： string（字符串）: 基本的数据存储单元，可以存储字符串、整数或者浮点数 hash（哈希/散列）: 一个键值对集合，可以存储多个字段。（map 类型，一个键可以包含多个字段，每个字段有自己的值） list（列表）: 一个简单的列表，可以存储一系列的字符串元素 set（集合）: 一...","head":[["meta",{"property":"og:url","content":"https://gly-dragon.github.io/blog/blog/%E4%B8%93%E9%A1%B9/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"龙哥不管事"}],["meta",{"property":"og:title","content":"数据类型"}],["meta",{"property":"og:description","content":"数据类型 Redis 中存在多种数据类型，但其中五种最重要，最常用： string（字符串）: 基本的数据存储单元，可以存储字符串、整数或者浮点数 hash（哈希/散列）: 一个键值对集合，可以存储多个字段。（map 类型，一个键可以包含多个字段，每个字段有自己的值） list（列表）: 一个简单的列表，可以存储一系列的字符串元素 set（集合）: 一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-14T02:57:15.000Z"}],["meta",{"property":"article:author","content":"龙哥不管事"}],["meta",{"property":"article:tag","content":"redis"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:modified_time","content":"2024-06-14T02:57:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-14T02:57:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"龙哥不管事\\",\\"url\\":\\"https://gly-dragon.github.io/blog/\\"}]}"]]},"headers":[{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]},{"level":2,"title":"string（字符串）","slug":"string-字符串","link":"#string-字符串","children":[]},{"level":2,"title":"hash（哈希/散列）","slug":"hash-哈希-散列","link":"#hash-哈希-散列","children":[]},{"level":2,"title":"list（列表）","slug":"list-列表","link":"#list-列表","children":[]},{"level":2,"title":"set（集合）","slug":"set-集合","link":"#set-集合","children":[]},{"level":2,"title":"zset（sorted set：有序集合)","slug":"zset-sorted-set-有序集合","link":"#zset-sorted-set-有序集合","children":[]},{"level":2,"title":"HyperLogLog","slug":"hyperloglog","link":"#hyperloglog","children":[]},{"level":2,"title":"Bitmaps","slug":"bitmaps","link":"#bitmaps","children":[]},{"level":2,"title":"Geospatial Indexes","slug":"geospatial-indexes","link":"#geospatial-indexes","children":[]},{"level":2,"title":"Streams","slug":"streams","link":"#streams","children":[]},{"level":2,"title":"redis 数据库操作的一些方法","slug":"redis-数据库操作的一些方法","link":"#redis-数据库操作的一些方法","children":[]}],"git":{"createdTime":1711899362000,"updatedTime":1718333835000,"contributors":[{"name":"龙哥不管事","email":"gly3498347531@163.com","commits":2}]},"readingTime":{"minutes":8.92,"words":2677},"filePathRelative":"专项/数据库/redis/数据类型.md","localizedDate":"2024年3月31日","excerpt":"<h2>数据类型</h2>\\n<p>Redis 中存在多种数据类型，但其中五种最重要，最常用：</p>\\n<ul>\\n<li><strong>string（字符串）:</strong> 基本的数据存储单元，可以存储字符串、整数或者浮点数</li>\\n<li><strong>hash（哈希/散列）:</strong> 一个键值对集合，可以存储多个字段。（map 类型，一个键可以包含多个字段，每个字段有自己的值）</li>\\n<li><strong>list（列表）:</strong> 一个简单的列表，可以存储一系列的字符串元素</li>\\n<li><strong>set（集合）:</strong> 一个无序集合，可以存储不重复的字符串元素</li>\\n<li><strong>zset(sorted set：有序集合):</strong> 类似于集合，但是每个元素都有一个分数（score）与之关联</li>\\n</ul>","autoDesc":true}');export{g as comp,h as data};
