import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as e,a}from"./app-J2yYuQKr.js";const i={},t=a(`<h1 id="redis中的事务" tabindex="-1"><a class="header-anchor" href="#redis中的事务"><span>redis中的事务</span></a></h1><p>**redis事务的定义：**redis事务是一个单独的隔离操作，事务中的所有命令都会序列化、按顺序地执行，事务在执行的过程 中，不会被其他客户端发送来的命令请求所打断。 redis事务的主要作用就是串联多个命令防止 别的命令插队。</p><h2 id="_1、multi、exec、discard" tabindex="-1"><a class="header-anchor" href="#_1、multi、exec、discard"><span>1、Multi、Exec、discard</span></a></h2><h3 id="_1-1、redis事务分2个阶段" tabindex="-1"><a class="header-anchor" href="#_1-1、redis事务分2个阶段"><span>1.1、redis事务分2个阶段</span></a></h3><p><strong>redis事务分2个阶段：组队阶段、执行阶段</strong></p><p>组队阶段：只是将所有命令加入命令队列 执行阶段：依次执行队列中的命令，在执行这些命令的过程中，不会被其他客户端发送的请求命令 插队或者打断。</p><p>从输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入Exec后，redis会 将之前的命令依次执行。可以使用discard来取消事务</p><img src="https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220429163037098.png" alt="image-20220429163037098" style="zoom:50%;"><h3 id="_1-2、multi" tabindex="-1"><a class="header-anchor" href="#_1-2、multi"><span>1.2、multi</span></a></h3><p>该命令标记一个事务块的开始，事务块内的多条命令会按照先后顺序被放进一个队列当中，最后由 exec 命令原子性(atomic)地执行。</p><p>示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>127.0.0.1<span class="token punctuation">:</span>6379<span class="token punctuation">&gt;</span> multi			<span class="token comment">#标记事务开始</span>
OK
127.0.0.1<span class="token punctuation">:</span>6379<span class="token punctuation">&gt;</span> set msg 100		<span class="token comment">#命令1</span>
QUEUED
127.0.0.1<span class="token punctuation">:</span>6379<span class="token punctuation">&gt;</span> incr msg		<span class="token comment">#命令2，多条命令按顺序插入</span>
QUEUED
127.0.0.1<span class="token punctuation">:</span>6379<span class="token punctuation">&gt;</span> exec			<span class="token comment">#执行</span>
1) OK							<span class="token comment">#命令1执行结果</span>
2) (integer) 101				<span class="token comment">#命令2执行结果</span>
127.0.0.1<span class="token punctuation">:</span>6379<span class="token punctuation">&gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3、exec" tabindex="-1"><a class="header-anchor" href="#_1-3、exec"><span>1.3、exec</span></a></h3><p>该命令用于执行事务块内的命令，假如某个(或某些) key 正处于 watch 命令的监视之下，且事务块中有和这个(或这些) key 相关的命令，那 么 exec 命令只在这个(或这些) key 没有被其他命令所改动的情况下执行并生效，否则该事务被打断 (abort)。</p><p>**返回值：**事务块内所有命令的返回值，按命令执行的先后顺序排列。 当操作被打断时，返回空值 nil 。</p><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 示例1：事务被成功执行</span>
redis<span class="token operator">&gt;</span> MULTI
OK
redis<span class="token operator">&gt;</span> INCR user_id
QUEUED
redis<span class="token operator">&gt;</span> INCR user_id
QUEUED
redis<span class="token operator">&gt;</span> INCR user_id
QUEUED
redis<span class="token operator">&gt;</span> PING
QUEUED
redis<span class="token operator">&gt;</span> EXEC
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token number">4</span><span class="token punctuation">)</span> PONG

<span class="token comment"># 示例2：监视 key，且事务成功执行</span>
redis<span class="token operator">&gt;</span> WATCH lock lock_times
OK
redis<span class="token operator">&gt;</span> MULTI
OK
redis<span class="token operator">&gt;</span> SET lock <span class="token string">&quot;huangz&quot;</span>
QUEUED
redis<span class="token operator">&gt;</span> INCR lock_times
QUEUED
redis<span class="token operator">&gt;</span> EXEC
<span class="token number">1</span><span class="token punctuation">)</span> OK
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>

<span class="token comment"># 示例3：监视 key，且事务被打断</span>
redis<span class="token operator">&gt;</span> WATCH lock lock_times
OK
redis<span class="token operator">&gt;</span> MULTI
OK
redis<span class="token operator">&gt;</span> SET lock <span class="token string">&quot;joe&quot;</span> <span class="token comment"># 就在这时，另一个客户端修改了 lock_times 的值</span>
QUEUED
redis<span class="token operator">&gt;</span> INCR lock_times
QUEUED
redis<span class="token operator">&gt;</span> EXEC <span class="token comment"># 因为 lock_times 被修改， joe 的事务执行失败</span>
<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4、discard" tabindex="-1"><a class="header-anchor" href="#_1-4、discard"><span>1.4、discard</span></a></h3><p>该命令用于取消事务，放弃执行事务块内的所有命令。总是返回<code>ok</code>。</p><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>redis<span class="token operator">&gt;</span> MULTI
OK
redis<span class="token operator">&gt;</span> PING
QUEUED
redis<span class="token operator">&gt;</span> SET greeting <span class="token string">&quot;hello&quot;</span>
QUEUED
redis<span class="token operator">&gt;</span> DISCARD
OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、事务的错误处理" tabindex="-1"><a class="header-anchor" href="#_2、事务的错误处理"><span>2、事务的错误处理</span></a></h2><h3 id="_2-1、情况1-组队中命令有误-导致所有命令取消执行" tabindex="-1"><a class="header-anchor" href="#_2-1、情况1-组队中命令有误-导致所有命令取消执行"><span>2.1、情况1：组队中命令有误，导致所有命令取消执行</span></a></h3><p>组队中某个命令出现了错误报告，执行时整个队列中所有的命令都会被取消。这种情况是redis语法使用错误造成的，比如在组队的时候使用了<code>set msg</code>但是这个语句里面没有<code>value</code>的值，那么这个语句就是错误的，这个语句本身就有问题，加入队列也会失败，那么在使用<code>exec</code>执行的时候，所有的命令都会被取消执行。</p><img src="https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220429164636414.png" alt="image-20220429164636414" style="zoom:50%;"><h3 id="_2-2、情况2-组队中没有问题-执行中部分成功部分失败" tabindex="-1"><a class="header-anchor" href="#_2-2、情况2-组队中没有问题-执行中部分成功部分失败"><span>2.2、情况2：组队中没有问题，执行中部分成功部分失败</span></a></h3><p>命令组队的过程中没有问题，执行中出现了错误会导致部分成功部分失败。比如使用<code>incr msg</code>命令时，<code>msg</code>的值并不是一个数值类型，那么这种情况下该命令会执行失败，但是不妨碍其他命令执行成功。</p><img src="https://gly-blog-file.oss-cn-shanghai.aliyuncs.com/img/image-20220429164853265.png" alt="image-20220429164853265" style="zoom:50%;"><h2 id="_3、redis事务三特性" tabindex="-1"><a class="header-anchor" href="#_3、redis事务三特性"><span>3、redis事务三特性</span></a></h2><ol><li>单独的隔离操作</li></ol><p>事务中的所有命令都会序列化、按顺序地执行，事务在执行过程中，不会被其他客户端发送来的命令请 求所打断。</p><ol start="2"><li>没有隔离级别的概念</li></ol><p>队列中的命令没有提交（exec）之前，都不会实际被执行，因为事务提交前任何指令都不会被实际执行。</p><ol start="3"><li>不能保证原子性</li></ol><p>事务中如果有一条命令执行失败，后续的命令仍然会被执行，没有回滚。 如果在组队阶段，有1个失败了，后面都不会成功；如果在组队阶段成功了，在执行阶段有那个命令失败 就这条失败，其他的命令则正常执行，不保证都成功或都失败。</p>`,35),l=[t];function r(d,c){return n(),e("div",null,l)}const u=s(i,[["render",r],["__file","事务.html.vue"]]),m=JSON.parse('{"path":"/database/redis/%E4%BA%8B%E5%8A%A1.html","title":"redis事务","lang":"zh-CN","frontmatter":{"title":"redis事务","tags":["redis","数据库"],"order":"4","description":"redis中的事务 **redis事务的定义：**redis事务是一个单独的隔离操作，事务中的所有命令都会序列化、按顺序地执行，事务在执行的过程 中，不会被其他客户端发送来的命令请求所打断。 redis事务的主要作用就是串联多个命令防止 别的命令插队。 1、Multi、Exec、discard 1.1、redis事务分2个阶段 redis事务分2个阶段...","head":[["meta",{"property":"og:url","content":"https://gly-dragon.github.io/blog/blog/database/redis/%E4%BA%8B%E5%8A%A1.html"}],["meta",{"property":"og:site_name","content":"书元"}],["meta",{"property":"og:title","content":"redis事务"}],["meta",{"property":"og:description","content":"redis中的事务 **redis事务的定义：**redis事务是一个单独的隔离操作，事务中的所有命令都会序列化、按顺序地执行，事务在执行的过程 中，不会被其他客户端发送来的命令请求所打断。 redis事务的主要作用就是串联多个命令防止 别的命令插队。 1、Multi、Exec、discard 1.1、redis事务分2个阶段 redis事务分2个阶段..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-01T02:17:41.000Z"}],["meta",{"property":"article:author","content":"龙哥不管事"}],["meta",{"property":"article:tag","content":"redis"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:modified_time","content":"2024-04-01T02:17:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"redis事务\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-01T02:17:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"龙哥不管事\\",\\"url\\":\\"https://gly-dragon.github.io/blog/\\"}]}"]]},"headers":[{"level":2,"title":"1、Multi、Exec、discard","slug":"_1、multi、exec、discard","link":"#_1、multi、exec、discard","children":[{"level":3,"title":"1.1、redis事务分2个阶段","slug":"_1-1、redis事务分2个阶段","link":"#_1-1、redis事务分2个阶段","children":[]},{"level":3,"title":"1.2、multi","slug":"_1-2、multi","link":"#_1-2、multi","children":[]},{"level":3,"title":"1.3、exec","slug":"_1-3、exec","link":"#_1-3、exec","children":[]},{"level":3,"title":"1.4、discard","slug":"_1-4、discard","link":"#_1-4、discard","children":[]}]},{"level":2,"title":"2、事务的错误处理","slug":"_2、事务的错误处理","link":"#_2、事务的错误处理","children":[{"level":3,"title":"2.1、情况1：组队中命令有误，导致所有命令取消执行","slug":"_2-1、情况1-组队中命令有误-导致所有命令取消执行","link":"#_2-1、情况1-组队中命令有误-导致所有命令取消执行","children":[]},{"level":3,"title":"2.2、情况2：组队中没有问题，执行中部分成功部分失败","slug":"_2-2、情况2-组队中没有问题-执行中部分成功部分失败","link":"#_2-2、情况2-组队中没有问题-执行中部分成功部分失败","children":[]}]},{"level":2,"title":"3、redis事务三特性","slug":"_3、redis事务三特性","link":"#_3、redis事务三特性","children":[]}],"git":{"createdTime":1711937861000,"updatedTime":1711937861000,"contributors":[{"name":"龙哥不管事","email":"gly3498347531@163.com","commits":1}]},"readingTime":{"minutes":4.05,"words":1214},"filePathRelative":"database/redis/事务.md","localizedDate":"2024年4月1日","excerpt":"\\n<p>**redis事务的定义：**redis事务是一个单独的隔离操作，事务中的所有命令都会序列化、按顺序地执行，事务在执行的过程 中，不会被其他客户端发送来的命令请求所打断。 redis事务的主要作用就是串联多个命令防止 别的命令插队。</p>\\n<h2>1、Multi、Exec、discard</h2>\\n<h3>1.1、redis事务分2个阶段</h3>\\n<p><strong>redis事务分2个阶段：组队阶段、执行阶段</strong></p>\\n<p>组队阶段：只是将所有命令加入命令队列 执行阶段：依次执行队列中的命令，在执行这些命令的过程中，不会被其他客户端发送的请求命令 插队或者打断。</p>","autoDesc":true}');export{u as comp,m as data};
